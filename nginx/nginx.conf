worker_processes    auto;
worker_cpu_affinity auto;

events {
  use epoll;
  multi_accept on;
  worker_connections 1024;
}

http{
  charset     utf-8;
  access_log  off;

  include       mime.types;
  default_type  application/octet-stream;

  open_file_cache           max=512 inactive=60s;
  open_file_cache_valid     30s;
  open_file_cache_min_uses  1;
  open_file_cache_errors    off;

  aio         on;
  sendfile    on;
  tcp_nodelay on;
  tcp_nopush  on;


  ##### timeout between two consecutive read()/write()
  client_body_timeout   10s;
  client_header_timeout 10s;
  send_timeout          10s;

  client_body_buffer_size 16k;

  keepalive_timeout   60s;
  reset_timedout_connection on;


  ##### do not show nginx version
  server_tokens off;


  ##### do not apply limit to local ip addrs
  geo $is_public_ip {
    192.168.0.0/16  0;
    172.16.0.0/12   1;
    10.0.0.0/8      1;
    default         2;
  }


  ##### [$binary_remote_addr] filter
  map $is_public_ip $filtered_binary_remote_addr {
    0 '';
    1 $binary_remote_addr;
    2 $binary_remote_addr;
  }


  ##### connection rate limit (processing conn is O(1)-op)
  limit_conn_zone $filtered_binary_remote_addr zone=PerIpConnLimit:10m;
  #                                        |                       └ size of memory to store all addrs
  #                                        └ whatever string; matches [zone=] in [limit_conn]
  limit_conn PerIpConnLimit 16;
  #                         └ # of each concurrent conns each [item-in-zone]($binary_remote_addr) can have

  ##### request rate limit (processing req O(N)-op)
  # limit_req_zone $filtered_binary_remote_addr zone=PerIpReqLimit:10m rate=10r/s;
  # #                                                                       └ =1req/100ms
  # limit_req zone=PerIpReqLimit burst=10 nodelay;
  # #                                 |  └ allow burst-reqs to process immediately
  # #                                 └ # of allowed burst-reqs beyond the rate limit


  ##### [$binary_remote_addr] filter
  map $is_public_ip $rate {
    0   0;
    1   8k;
    2   8k;
  }

  ##### bytes/sec
  limit_rate       $rate;
  limit_rate_after 1m;


  ##### SSL
  ssl_session_timeout    12h;
  ssl_session_cache      shared:SSL:10m;


  ##### OCSP Stapling
  ssl_stapling        on;
  ssl_stapling_verify on;
  resolver            1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] 8.8.8.8 8.8.4.4 [2001:4860:4860::8888] [2001:4860:4860::8844] 208.67.222.222 208.67.220.220 [2620:119:35::35] [2620:119:53::53] 9.9.9.9 149.112.112.112 [2620:fe::fe] [2620:fe::9] 64.6.64.6 64.6.65.6 [2620:74:1b::1:1] [2620:74:1c::2:2] valid=60s;
  resolver_timeout    2s;


  ##### HTTP
  server {
      listen      80 default_server;  # v4
      # listen [::]:80 default_server;  # v6

      return 301 https://$host$request_uri;
  }

  ##### HTTPS, h2, h3, also change port in [add_header Alt-Svc]
  server {
    listen      443 ssl http2 http3 reuseport;  # v4
    # listen [::]:443 ssl http2 http3 reuseport;  # v6

    ##### SSL/TLS
    ssl_early_data  on;       # 0-RTT
    ssl_protocols   TLSv1.3;  # QUIC requires TLS 1.3
    add_header      Alt-Svc 'h3=":443";ma=86400';  # also change [listen http3]

    ssl_certificate         /etc/acme.sh/example.com/fullchain.pem;
    ssl_certificate_key     /etc/acme.sh/example.com/privkey.pem;
    ssl_trusted_certificate /etc/acme.sh/example.com/chain.pem;
  }
}
